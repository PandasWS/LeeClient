__LOCAL_QuestList = {}
__EP_QuestList = {}
QuestTable = {}

function makeLocalQuestList(Quest_list)
	for episodeId,episode in ipairs(Quest_list) do
		episodeId  = getTableSize(__LOCAL_QuestList) + 1
		__LOCAL_QuestList[episodeId] = episode
		episode.id = episodeId

		for chapterId,chapter in ipairs(episode.list) do
			__LOCAL_QuestList[episodeId][chapterId] = chapter
			chapter.id = chapterId

			for questId,quest in ipairs(chapter.list) do
				__LOCAL_QuestList[episodeId][chapterId][questId] = quest
				quest.id = questId
			end
		end
	end
end


function makeEPQuestList(Quest_list)
	for episodeId,episode in ipairs(Quest_list) do
		episodeId  = getTableSize(__EP_QuestList) + 1
		__EP_QuestList[episodeId] = episode
		episode.id = episodeId

		for chapterId,chapter in ipairs(episode.list) do
			__EP_QuestList[episodeId][chapterId] = chapter
			chapter.id = chapterId

			for questId,quest in ipairs(chapter.list) do
				__EP_QuestList[episodeId][chapterId][questId] = quest
				quest.id = questId
			end
		end
	end
end



function queryEpisode(tabid,episodeId)
	if( tabid == 4 ) then
		if(__LOCAL_QuestList[episodeId] == nil) then return nil,nil,nil,nil end

		return __LOCAL_QuestList[episodeId].id,
				__LOCAL_QuestList[episodeId].name,
				__LOCAL_QuestList[episodeId].imagefile,
				getChapterIterator(episodeId,__LOCAL_QuestList)
    elseif( tabid == 3 ) then
		if(__EP_QuestList[episodeId] == nil) then return nil,nil,nil,nil end

		return __EP_QuestList[episodeId].id,
				__EP_QuestList[episodeId].name,
				__EP_QuestList[episodeId].imagefile,
				getChapterIterator(episodeId,__EP_QuestList)
	end
end

function queryChapter(tabid,episodeId,chapterId)
	if( tabid == 4 ) then
		if(__LOCAL_QuestList[episodeId] == nil) then return nil,nil,nil,nil end
		if(__LOCAL_QuestList[episodeId][chapterId] == nil) then return nil,nil,nil,nil end

		return __LOCAL_QuestList[episodeId].id,
				__LOCAL_QuestList[episodeId][chapterId].id,
				__LOCAL_QuestList[episodeId][chapterId].name,
				getQuestIterator(episodeId,chapterId,__LOCAL_QuestList)
	elseif( tabid == 3 ) then
		if(__EP_QuestList[episodeId] == nil) then return nil,nil,nil,nil end
		if(__EP_QuestList[episodeId][chapterId] == nil) then return nil,nil,nil,nil end

		return __EP_QuestList[episodeId].id,
				__EP_QuestList[episodeId][chapterId].id,
				__EP_QuestList[episodeId][chapterId].name,
				getQuestIterator(episodeId,chapterId,__EP_QuestList)
	end
end

function queryQuest(tabid,episodeId,chapterId,questId)
	if( tabid == 4 ) then
		if(__LOCAL_QuestList[episodeId] == nil) then return nil,nil,nil,nil,nil,nil end
		if(__LOCAL_QuestList[episodeId][chapterId] == nil) then return nil,nil,nil,nil,nil,nil end
		if(__LOCAL_QuestList[episodeId][chapterId][questId] == nil) then return nil,nil,nil,nil,nil,nil end

		return __LOCAL_QuestList[episodeId].id,
				__LOCAL_QuestList[episodeId][chapterId].id,
				__LOCAL_QuestList[episodeId][chapterId][questId].id,
				__LOCAL_QuestList[episodeId][chapterId][questId].name,
				__LOCAL_QuestList[episodeId][chapterId][questId].scrfilename,
				__LOCAL_QuestList[episodeId][chapterId][questId].questID 
	elseif( tabid == 3 ) then
		if(__EP_QuestList[episodeId] == nil) then return nil,nil,nil,nil,nil,nil end
		if(__EP_QuestList[episodeId][chapterId] == nil) then return nil,nil,nil,nil,nil,nil end
		if(__EP_QuestList[episodeId][chapterId][questId] == nil) then return nil,nil,nil,nil,nil,nil end

		return __EP_QuestList[episodeId].id,
				__EP_QuestList[episodeId][chapterId].id,
				__EP_QuestList[episodeId][chapterId][questId].id,
				__EP_QuestList[episodeId][chapterId][questId].name,
				__EP_QuestList[episodeId][chapterId][questId].scrfilename,
				__EP_QuestList[episodeId][chapterId][questId].questID 
	end
end

function getEpisodeIterator(__QuestList)
	local pos = 1
	return	{
		hasNext = function()
			return __QuestList[pos]
		end,

		value = function()
			temp_pos = pos
			pos = pos + 1
			return __QuestList[temp_pos]
		end
	}
end

function getChapterIterator(episodeId,__QuestList)
	local pos = 1
	return	{
		hasNext = function()
			if(__QuestList[episodeId]==nil) then return nil end
			return __QuestList[episodeId][pos]
		end,

		value =	function()
			temp_pos = pos
			pos = pos + 1
			return __QuestList[episodeId][temp_pos]
		end
	}
end

function getQuestIterator(episodeId,chapterId,__QuestList)
	local pos = 1
	return	{
		hasNext = function()
			if(__QuestList[episodeId][chapterId]==nil) then return nil end
			return __QuestList[episodeId][chapterId][pos]
		end,

		value =	function()
			temp_pos = pos
			pos = pos + 1
			return __QuestList[episodeId][chapterId][temp_pos]
		end
	}
end

function queryQuestID(tableName , questID)
	
	returnTable = QuestTable[tableName]

	if(returnTable[questID] == nil) then return nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil end

	return  returnTable[questID].NPCFromName,
		returnTable[questID].NPCFromMap,
		returnTable[questID].NPCFromSpr,
		returnTable[questID].NPCFromX,
		returnTable[questID].NPCFromY,
		returnTable[questID].NPCToName,
		returnTable[questID].NPCToMap,
		returnTable[questID].NPCToSpr,
		returnTable[questID].NPCToX,
		returnTable[questID].NPCToY,
		returnTable[questID].Item,
		returnTable[questID].PrizeItem,
		returnTable[questID].Title,
		returnTable[questID].QuickInfo,
		returnTable[questID].Info,
		returnTable[questID].Hunt1,
		returnTable[questID].Hunt2,
		returnTable[questID].Hunt3,
		returnTable[questID].Time,
		returnTable[questID].Lv
end

-- 항목 퀘스트 파일이 추가 될때마다 이곳에 추가 시켜 준다. 
makeLocalQuestList(LOCAL_MalayaQuest_List)
makeLocalQuestList(LOCAL_DewataQuest_List)
makeEPQuestList(EP_141Quest_List)


-- 개별 퀘스트 파일이 추가 될때마다 이곳에 추가 시켜준다.
QuestTable.malayaQuest = malayaQuest_List
QuestTable.epsoid141Quest = epsoid141Quest_List
QuestTable.DewataQuest = DewataQuest_List

-- 끝
-- key: 퀘스트아이디 value: 퀘스트설명테이블
QuestTable.quest = {}; 
-- key: 에피소드일련번호 
-- val: key: 챕터일련번호
--      val: key:퀘스트일련번호
--           val: 퀘스트요약정보테이블
QuestTable.tab_recommend = {};
QuestTable.tab_episode   = {};
QuestTable.tab_local     = {};
QuestTable.tab_event     = {};
QuestTable.tab_new       = {};	



-- 요약집(summary book)를 등록합니다.
QuestTable.func_tab_add =
function( tbl, summarybook )	
	-- episode 는 기존에 이미 존재할 수 있으므로 seqid 를 재할당 해야 합니다.	
	summarybookseqId  = #tbl + 1
	tbl[ summarybookseqId ] = summarybook
	summarybook.seqid = summarybookseqId

	-- chaper는 항상 새로 만들어지는 것이므로 seqid 를 재할당 할 필요가 없다.
	-- 이미 1부터 순차적인 번호로 저장되어 있다.
	for chapterseqId, chapter in ipairs( summarybook.list ) do
		tbl[ summarybookseqId ][ chapterseqId ] = chapter
		chapter.seqid = chapterseqId

		for questseqId, summary in ipairs( chapter.list ) do
			tbl[ summarybookseqId ][ chapterseqId ][ questseqId ] = summary
			summary.seqid = questseqId
		end
	end	
end

-- 요약집(summary book)을 묶음단위로 추가합니다.
-- 하위버젼을 위해 만든 함수 입니다.
QuestTable.func_tab_add_pack =
function( tbl, tabpack )	
	-- episode 는 기존에 이미 존재할 수 있으므로 seqid 를 재할당 해야 합니다.
	for summarybookseqId, summarybook in ipairs( tabpack ) do		
		QuestTable.func_tab_add( tbl, summarybook );
	end
end


-- 퀘스트묶음을 개별단위로 등록합니다.
-- 테이블 QuestTable 에 키는 퀘스트아이디 값은 퀘스트설명
QuestTable.func_quest_add = 
function( questPack )
	for questId, questDesc in pairs( questPack ) do
		QuestTable.quest[ questId ] = questDesc		
	end
end

-- 하위버젼을 위해 만들어놓았던 퀘스트 정보들을 등록합니다.
QuestTable.func_quest_add( malayaQuest_List );
QuestTable.func_quest_add( epsoid141Quest_List );
QuestTable.func_quest_add( DewataQuest_List );
QuestTable.func_tab_add_pack( QuestTable.tab_episode, EP_141Quest_List );
QuestTable.func_tab_add_pack( QuestTable.tab_local, LOCAL_MalayaQuest_List );
QuestTable.func_tab_add_pack( QuestTable.tab_local, LOCAL_DewataQuest_List );


-- 지정된 퀘스트에 대한 설명을 리턴한다.
function query_quest_desc( questID )

	if( QuestTable.quest[ questID ] == nil) then return end -- 그냥리턴하면 모두 nil 이다.
	return  
		QuestTable.quest[ questID ].NPCFromName,
		QuestTable.quest[ questID ].NPCFromMap,
		QuestTable.quest[ questID ].NPCFromSpr,
		QuestTable.quest[ questID ].NPCFromX,
		QuestTable.quest[ questID ].NPCFromY,
		QuestTable.quest[ questID ].NPCToName,
		QuestTable.quest[ questID ].NPCToMap,
		QuestTable.quest[ questID ].NPCToSpr,
		QuestTable.quest[ questID ].NPCToX,
		QuestTable.quest[ questID ].NPCToY,
		QuestTable.quest[ questID ].Item,
		QuestTable.quest[ questID ].PrizeItem,
		QuestTable.quest[ questID ].Title,
		QuestTable.quest[ questID ].Info,
		QuestTable.quest[ questID ].Hunt1,
		QuestTable.quest[ questID ].Hunt2,
		QuestTable.quest[ questID ].Hunt3,
		QuestTable.quest[ questID ].Time
end

function query_quest_tab_episode( tabname, episodeseqId )
	if( nil == QuestTable[ tabname ] ) then return; end
	if( nil == QuestTable[ tabname ][ episodeseqId ] ) then return; end        

	local episode = QuestTable[ tabname ][ episodeseqId ];
	return episode.name, episode.imagefile;
	
end

function query_quest_tab_chapter( tabname, episodeseqId, chapterseqId )

	if( nil == QuestTable[ tabname ] ) then return; end
	if( nil == QuestTable[ tabname ][ episodeseqId ] ) then return; end
	if( nil == QuestTable[ tabname ][ episodeseqId ][ chapterseqId] ) then return; end

	local chapter = QuestTable[ tabname ][ episodeseqId ][ chapterseqId];
	return chapter.name;	
end

function query_quest_tab_summary( tabname, episodeseqId, chapterseqId, questseqId )

	if( nil == QuestTable[ tabname ] ) then return; end
	if( nil == QuestTable[ tabname ][ episodeseqId ] ) then return; end
	if( nil == QuestTable[ tabname ][ episodeseqId ][ chapterseqId] ) then return; end
	if( nil == QuestTable[ tabname ][ episodeseqId ][ chapterseqId][ questseqId ] ) then return; end

	local summary = QuestTable[ tabname ][ episodeseqId ][ chapterseqId][ questseqId ];
	return summary.name, summary.questID;
	
end
